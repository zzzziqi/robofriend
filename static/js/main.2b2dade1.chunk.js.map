{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardLists.js","components/SearchBar.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","alt","src","CardLists","robots","map","user","index","SearchBar","searchChange","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchFiled","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mDCMCQ,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAExB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,mBACpB,6BAAKC,IACL,4BAAIC,QC+CKI,EArDG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAcnB,OACE,8BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CAEEV,GAAIO,EAAOG,GAAOV,GAClBC,KAAMM,EAAOG,GAAOT,KACpBC,MAAOK,EAAOG,GAAOR,OAHhBK,EAAOG,GAAOV,UCThBW,EAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVU,YAAY,0BACZC,SAAUF,OCSHG,EAfA,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAEV,qBACEG,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGN,EAAMO,YCSEC,E,kDAlBb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,2DAEFG,KAAKb,MAAMO,a,GAfMQ,aCuIbC,E,kDAxDb,aAAe,IAAD,8BACZ,gBAoBFC,eAAiB,SAACC,GAGhB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SArB1C,EAAKZ,MAAQ,CACXlB,OAAQ,GACR4B,YAAa,IAEflB,QAAQC,IAAI,eAPA,E,qDAUd,WAAqB,IAAD,OAElBoB,MAAM,8CACH7C,MAAK,SAAC8C,GAAD,OAAcA,EAASC,UAC5B/C,MAAK,SAACgD,GAAD,OAAW,EAAKX,SAAS,CAAEvB,OAAQkC,OAC3CxB,QAAQC,IAAI,uB,oBAiBd,WACED,QAAQC,IAAI,UADL,MAEyBW,KAAKJ,MAA7BlB,EAFD,EAECA,OAAQ4B,EAFT,EAESA,YACVO,EAAiBnC,EAAOoC,QAAO,SAACC,GACpC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAEvD,OAAQtC,EAAOwC,OAGb,sBAAK5C,UAAU,KAAf,UAEE,oBAAIA,UAAU,KAAd,0BAEA,cAAC,EAAD,CAAWS,aAAciB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAW1B,OAAQmC,WATzB,6C,GAxCYX,aCpElBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UAME,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.2b2dade1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\n// const Card = (props) => {\nconst Card = ({ id, name, email }) => {\n  //   const { id, name, email } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robot\" src={`https://robohash.org/${id}?size=300x300`} />\n      <h1>{name}</h1>\n      <p>{email}</p>\n    </div>\n  );\n};\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardLists = ({ robots }) => {\n  //   const cardArr = robots.map((user, index) => {\n  //     return (\n  //       <Card\n  //         key={robots[index].id}\n  //         id={robots[index].id}\n  //         name={robots[index].name}\n  //         email={robots[index].email}\n  //       />\n  //     );\n  //   });\n  // if (true) {\n  //   throw new Error(\"this is an error\");\n  // }\n  return (\n    <div>\n      {/* {cardArr} */}\n      {robots.map((user, index) => {\n        return (\n          <Card\n            key={robots[index].id}\n            id={robots[index].id}\n            name={robots[index].name}\n            email={robots[index].email}\n          />\n        );\n      })}\n      {/* {[\n        //   可以渲染数组\n        <Card\n          id={robots[0].id}\n          name={robots[0].name}\n          email={robots[0].email}\n        />,\n        <Card\n          id={robots[1].id}\n          name={robots[1].name}\n          email={robots[1].email}\n        />,\n        <Card\n          id={robots[2].id}\n          name={robots[2].name}\n          email={robots[2].email}\n        />,\n        <Card\n          id={robots[3].id}\n          name={robots[3].name}\n          email={robots[3].email}\n        />,\n      ]} */}\n    </div>\n  );\n};\nexport default CardLists;\n","import React from \"react\";\n\nconst SearchBar = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        placeholder=\"Enter your robot friend\"\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  console.log(props);\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  // react 16之后有新的lifecycle method，componentDidCatch, 这个方法可以catch 故障 in JS，如果有任何故障发生，它就会运行lifecycle hook,它有两个参数可以传进去，但在我们这个机器人案例中，不需要用到这两个参数\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>noooooo, that is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n\n// class App extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { Component } from \"react\";\n// import { robots } from \"../robots\";\nimport CardLists from \"../components/CardLists\";\nimport SearchBar from \"../components/SearchBar\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\n// props只能读取\n// 想要更改的话，需要有一个state对象，存数据，想使用state对象的话，就需要通过class来声明类\n// const App = ()=> {\n//   return (\n//     <div className=\"tc\">\n//       {/* 按照到道理而言，h1也 是需要改造成一个component的 */}\n//       <h1>robotfriends</h1>\n//       <SearchBar />\n//       <CardLists robots={robots} />\n//     </div>\n//   );\n// }\n\n// const state = {\n//   robots: robots,\n//   searchFiled: \"\",\n// };\n\nclass App extends Component {\n  constructor() {\n    super();\n    // state在parent comoponent那里，看一下那个diagram，其实相当于通过parent component进行数据的互动\n    this.state = {\n      robots: [],\n      searchFiled: \"\",\n    };\n    console.log(\"constructor\");\n  }\n\n  componentDidMount() {\n    // this.setState({ robots: robots });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n    console.log(\"componentDidMount\");\n  }\n  // 建一个函数获取searchBar的input数据\n  // 这个this指向的是onSearchChange的函数调用者，这里是被input调用的，所以指向的并不是App这个类，使用箭头函数可以解决这个问题\n  // 记住每次在组件中用自己的方法 ，使用箭头函数\n  // onSearchChange(event) {\n  onSearchChange = (event) => {\n    // 要设置state的值只能用setState来设置，不能用this.state.searchField进行更改\n    // this.state.searchFiled = event.target.value;\n    this.setState({ searchFiled: event.target.value });\n    // const filteredRobots = this.state.robots.filter((robot) => {\n    //   return robot.name\n    //     .toLowerCase()\n    //     .includes(this.state.searchFiled.toLowerCase());\n    // });\n    // console.log(filteredRobots);\n  };\n  render() {\n    console.log(\"render\");\n    const { robots, searchFiled } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchFiled.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        {/* 按照到道理而言，h1也是需要改造成一个component的 */}\n        <h2 className=\"f1\">robotfriends</h2>\n        {/* <CardLists robots={robots} /> */}\n        <SearchBar searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardLists robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import Hello from \"./Hello\";\nimport \"tachyons\";\n// import Card from \"./Card\";\n// import { robots } from \"./robots\";\n// import CardLists from \"./CardLists\";\nimport App from \"./containers/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Hello greeting={\"你好，\" + \"我是一个属性\"} /> */}\n    {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} /> */}\n    {/* <CardLists robots={robots} /> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}